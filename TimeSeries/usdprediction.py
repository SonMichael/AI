# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e34oAHBazB14HBrMY7aRkQ_zuiIr0tZD
"""

# Người sử dụng thay đổi ở đây
# Link file
link = 'https://storage.googleapis.com/protonx-cloud-storage/data_20200828.xlsx'
# Tên sheet muốn dùng
sheet_name = 'USDVND'
# Tên cột muốn dự đoán
col = 'Rate'

!wget $link -O data.xlsx

"""### Code hiển thị """

import numpy as np
import matplotlib.pyplot as plt
def plot_series(time, series, format="-", start=0, end=None):
    plt.plot(time[start:end], series[start:end], format)
    plt.xlabel("Time")
    plt.ylabel("Value")
    plt.grid(True)

"""### Load dữ liệu"""

import pandas as pd
xls = pd.ExcelFile('data.xlsx')

"""### Danh sách các sheet"""

xls.sheet_names

"""### Lựa chọn Sheet mong muốn sử dụng. Trong trường hợp này sử dụng sheet `USDVND`"""

df = pd.read_excel(xls, sheet_name)

df

"""### Lấy data cột Rate"""

import numpy as np
series = np.array(df[col])

"""### Lấy chiều dài thời gian. Dạng [0, 1, ....]"""

time = np.arange(len(series))

"""### Hiển thị dữ liệu"""

plt.figure(figsize=(10, 6))
plot_series(time, series)

"""### Chuẩn hóa dữ liệu. Sử dụng Min-Max Scale"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
series = scaler.fit_transform(series.reshape(-1, 1))
series = series.flatten()

series[:10]

"""### Chia tập Train và tập Test

Tỉ lệ 80 - 20
"""

rate = 0.9
split_time = int(rate * len(series))
time_train = time[:split_time]
x_train = series[:split_time]
time_valid = time[split_time:]
x_valid = series[split_time:]

window_size = 30
batch_size = 32
shuffle_buffer_size = 1000

len(x_train), len(x_valid)

"""### Thiết kế cửa sổ để xây dựng bộ dữ liệu"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)

"""### Hàm dự đoán"""

def model_forecast(model, series, window_size):
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size))
    ds = ds.batch(32).prefetch(1)
    forecast = model.predict(ds)
    return forecast

"""### Xây dựng model

#### Model 1 : LSTM
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Bidirectional

tf.random.set_seed(0)
np.random.seed(0)

train_set = windowed_dataset(x_train, window_size=60, batch_size=64, shuffle_buffer=shuffle_buffer_size)

tf.random.set_seed(0)
np.random.seed(0)

train_set = windowed_dataset(x_train, window_size=60, batch_size=64, shuffle_buffer=shuffle_buffer_size)
model = Sequential([
                    LSTM(64, return_sequences=True),
                    LSTM(64, return_sequences=True),
                    Dense(32, activation='relu'),
                    Dense(16, activation='relu'),
                    Dense(1)
])
model.compile(loss=tf.keras.losses.Huber(), optimizer='adam', metrics=['mae'])
history = model.fit(train_set, epochs=100)

rnn_forecast = model_forecast(model, series[..., np.newaxis], window_size)
rnn_forecast = rnn_forecast[split_time - window_size:-1, -1, 0]
with plt.style.context('ggplot'):
    plt.figure(figsize=(16, 8))
    plot_series(time_valid, x_valid)
    plot_series(time_valid, rnn_forecast)
    labels = ['Real', 'Predicted']
    plt.legend(labels)
    plt.show()